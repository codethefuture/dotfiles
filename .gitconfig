[include]
  path = ~/.gitconfig.local

[color]
  # colorの設定(以下のコマンドは自動で色つける)
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  grep = auto
  ui = auto

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 

[diff "json"]
  textconv = "perl -MJSON -0e \"print JSON->new->canonical->pretty->encode(decode_json(<>))\""

[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

[diff]
  tool = meld

#[merge]
#  tool = p4merge

#[mergetool]
#  keepBackup = false

#[mergetool "p4merge"]
#  path = p4merge
#  keepTemporaries = false
#  trustExitCode = false

[alias]
  s = status -sb -uno
  st = status
  sh = show
  po = push origin
  so = remote show origin
  f = fetch
  a = add
  ap = add -p              # 選択してgit addするかどうか決める
  ci = commit -v           # diffの結果がまとめて表示
  ciam = commit --amend    # 直前のcommitを修正
  co = checkout
  # merge時に不要なmergeコミットしたくないときに利用
  ri  = rebase -i
  up = pull --rebase       # pull rebase
  # branch関連
  br = branch
  brr = branch --remote    # origin/masterにmergeの済んだリモートブランチ
  ba = branch -a           # originも含めた全てのbranchを表示
  bm = branch --merged     # merge済みのbranchを表示
  bn = branch --no-merged  # mergeしてないbranchを表示
  # log関連
  wc = whatchanged         # logに変更されたファイルも一緒に出す
  ls = log --stat          # logに変更されたファイルも一緒に出す
  lp = log -p              # diffも一緒に出す
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr = log origin          # originのlog
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges
  # logをtree表示
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  # diff関連
  df = diff                  # diff
  dfwb = diff -w -b          # 空白と空の改行を無視
  dm = diff master           # masterとのdiff
  dw = diff --color-words    # 単語単位でいろつけてdiff
  dc = diff --cached         # addされているものとのdiff
  ds = diff --staged         # 同上(1.6.1移行)
  d1 = diff HEAD~            # HEADから1つ前とdiff
  d2 = diff HEAD~~           # HEADから2つ前とdiff
  d3 = diff HEAD~~~          # HEADから3つ前とdiff
  d4 = diff HEAD~~~~         # HEADから4つ前とdiff
  d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
  d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; mvim `f`"
  # mergeの際にconflictが起きたファイルをadd
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  # grep関連
  gr = grep
  gn = grep -n
  # git svn
  gsc = svn dcommit
  gsr = svn rebase

  # reset
  cancel = !git commit -a -m 'Temporary commit for cancel' && git reset --hard HEAD~

[merge]
  ff = false

[push]
  default = upstream

[branch "master"]
  rebase = true # 他の人の変更取り込みだけでマージコミットが記録されるのを防ぐ

[i18n]
  commitencoding = UTF-8

[core]
  excludesfile = /Users/oohira_takeshi/.gitignore
  pager = lv -c
  editor = vim

[interactive]
  singlekey = true # git add/checkout -p時に，エンターでの決定を省略する

[apply]
  whitespace = nowarn # Ignore whitespace

[browse-remote "github.com"]
  top = https://{host}/{path}
  ref = https://{host}/{path}/tree/{short_ref}
  rev = https://{host}/{path}/commit/{commit}
  file = "https://{host}/{path}/blob/{short_rev}/{file}{line && \"#L%d\" % line}"

