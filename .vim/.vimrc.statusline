"------------------------------------
" ステータスラインを表示
"------------------------------------
set laststatus=2          " 常にステータスラインを表示
set statusline=%<     " 行が長すぎるときに切り詰める位置
"set statusline+=[%n]  " バッファ番号
"set statusline+=%m    " %m 修正フラグ
"set statusline+=%r    " %r 読み込み専用フラグ
"set statusline+=%h    " %h ヘルプバッファフラグ
"set statusline+=%w    " %w プレビューウィンドウフラグ
"set statusline+=%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}  " fencとffを表示
"set statusline+=%y    " バッファ内のファイルのタイプ
set statusline+=\     " 空白スペース
set statusline+=%=    " 左寄せ項目と右寄せ項目の区切り
set statusline+=%{g:gitCurrentBranch} " Gitのブランチ名を表示
set statusline+=\ \   " 空白スペース2個
"set statusline+=%1l   " 何行目にカーソルがあるか
set statusline+=/
"set statusline+=%L    " バッファ内の総行数
set statusline+=,
set statusline+=%c    " 何列目にカーソルがあるか
"set statusline+=%V    " 画面上の何列目にカーソルがあるか
set statusline+=\ \   " 空白スペース2個
set statusline+=%P    " ファイル内の何％の位置にあるか

set statusline+=%#warningmsg# "エラーメッセージの書式
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set statusline=\ [%02n]                                          "number of buffer
"set statusline+=\ %F                                             "file name
if winwidth(0) >= 130
  set statusline+=\ %F    " バッファ内のファイルのフルパス
else
  set statusline+=\ %t    " ファイル名のみ
endif
set statusline+=\ %m\ %r\ %h\ %w                                 "読み込み専用ファイルはRO,変更されたら+とか
set statusline+=[%{&fileencoding}\ %{&fileformat}\ %{&filetype}]
"set statusline+=%=\ %{fugitive#statusline()}                     "git  branch 表示
set statusline+=\ (%l/%L,%v)                                     "行/行数、列

" vim-powerlineでフォントにパッチを当てないなら以下をコメントアウト
"let g:Powerline_symbols = 'fancy'
" フォントサイズはお好みで
"set guifont=Ricty\ for\ Powerline:h14
"let g:Powerline_theme ='jellybeans'
"let g:Powerline_colorscheme ='jellybeans'

"ステータスラインに文字コードと改行文字を表示する
" if winwidth(0) >= 120
  " set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %{g:HahHah()}\ %F%=[%{GetB()}]\ %{fugitive#statusline()}\ %l,%c%V%8P
" else
  " set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %{g:HahHah()}\ %f%=[%{GetB()}]\ %{fugitive#statusline()}\ %l,%c%V%8P
" endif

"入力モード時、ステータスラインのカラーを変更
" augroup InsertHook
" autocmd!
" autocmd InsertEnter * highlight StatusLine guifg=#ccdc90 guibg=#2E4340 ctermfg=cyan
" autocmd InsertLeave * highlight StatusLine guifg=#2E4340 guibg=#ccdc90 ctermfg=white
" augroup END

"自動的に QuickFix リストを表示する
autocmd QuickfixCmdPost make,grep,grepadd,vimgrep,vimgrepadd cwin
autocmd QuickfixCmdPost lmake,lgrep,lgrepadd,lvimgrep,lvimgrepadd lwin

function! GetB()
  let c = matchstr(getline('.'), '.', col('.') - 1)
  let c = iconv(c, &enc, &fenc)
  return String2Hex(c)
endfunction
" help eval-examples
" The function Nr2Hex() returns the Hex string of a number.
func! Nr2Hex(nr)
  let n = a:nr
  let r = ""
  while n
    let r = '0123456789ABCDEF'[n % 16] . r
    let n = n / 16
  endwhile
  return r
endfunc
" The function String2Hex() converts each character in a string to a two
" character Hex string.
func! String2Hex(str)
  let out = ''
  let ix = 0
  while ix < strlen(a:str)
    let out = out . Nr2Hex(char2nr(a:str[ix]))
    let ix = ix + 1
  endwhile
  return out
endfunc

""ステータスラインに文字コードやBOM、16進表示等表示
""iconvが使用可能の場合、カーソル上の文字コードをエンコードに応じた表示にするFencB()を使用
"if has('iconv')
  "set statusline=%<%f\ %m\ %r%h%w%{'['.(&fenc!=''?&fenc:&enc).(&bomb?':BOM':'').']['.&ff.']'}%=[0x%{FencB()}]\ (%v,%l)/%L%8P\
"else
  "set statusline=%<%f\ %m\ %r%h%w%{'['.(&fenc!=''?&fenc:&enc).(&bomb?':BOM':'').']['.&ff.']'}%=\ (%v,%l)/%L%8P\
"endif

"function! FencB()
  "let c = matchstr(getline('.'), '.', col('.') - 1)
  "let c = iconv(c, &enc, &fenc)
  "return s:Byte2hex(s:Str2byte(c))
"endfunction

"function! s:Str2byte(str)
  "return map(range(len(a:str)), 'char2nr(a:str[v:val])')
"endfunction

"function! s:Byte2hex(bytes)
  "return join(map(copy(a:bytes), 'printf("%02X", v:val)'), '')
"endfunction

""------------------------------------
""挿入モード時、ステータスラインの色を変更
"let g:hi_insert = 'highlight StatusLine guifg=darkblue guibg=darkyellow gui=none ctermfg=blue ctermbg=yellow cterm=none'

"if has('syntax')
  "augroup InsertHook
    "autocmd!
    "autocmd InsertEnter * call s:StatusLine('Enter')
    "autocmd InsertLeave * call s:StatusLine('Leave')
  "augroup END
"endif
"let s:slhlcmd = ''
"function! s:StatusLine(mode)
  "if a:mode == 'Enter'
    "silent! let s:slhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
    "silent exec g:hi_insert
  "else
    "highlight clear StatusLine
    "silent exec s:slhlcmd
    "redraw
  "endif
"endfunction
"function! s:GetHighlight(hi)
  "redir => hl
  "exec 'highlight '.a:hi
  "redir END
  "let hl = substitute(hl, '[\r\n]', '', 'g')
  "let hl = substitute(hl, 'xxx', '', '')
  "return hl
"endfunction

let g:gitCurrentBranch = ''
function! CurrentGitBranch()
    let cwd = getcwd()
    cd %:p:h
    let branch = matchlist(system('/usr/bin/env git branch -a --no-color'), '\v\* ([0-9A-Za-z\/]*)\r?\n')
    execute 'cd ' . cwd
    if (len(branch))
      let g:gitCurrentBranch = '[git:' . branch[1] . ']'
    else
      let g:gitCurrentBranch = ''
    endif
    return g:gitCurrentBranch
endfunction

autocmd BufEnter * :call CurrentGitBranch()


