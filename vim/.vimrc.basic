"------------------------------------
" 基本設定
"------------------------------------
"beep off
set noerrorbells
set vb t_vb=
set visualbell

set modelines=0           " モードラインは無効
set autoread              " 開いているファイルが編集されると再読み込み

"set nocompatible
"autocmd!

"style
syntax enable
set hlsearch
set wrapscan
"set viminfo=
hi PmenuSel cterm=reverse ctermfg=33 ctermbg=222 gui=reverse guifg=#3399ff guibg=#f0e68c

" folding
set foldmethod=syntax     " syntax に依存して folding を行う
set foldlevel=99          " folding は行わない
set foldcolumn=0          " fold 時のツリー表示は行わない
set foldcolumn=2
set foldtext=FoldCCtext()
set fillchars=vert:\|
noremap <silent> <C-g> :echo FoldCCnavi()<CR>
nnoremap <expr> h col('.') == 1 && foldlevel(line('.')) > 0 ? 'zc' : 'h'
nnoremap <expr> l foldclosed(line('.')) != -1 ? 'zo0' : 'l'
vnoremap <expr> h col('.') == 1 && foldlevel(line('.')) > 0 ? 'zcgv' : 'h'
vnoremap <expr> l foldclosed(line('.')) != -1 ? 'zogv0' : 'l'

" window
set splitright "Window Split時に新Windowを右に表示
set splitbelow "Window Split時に新windowを下に表示

" 文字化け対策
set fileencodings=utf-8,cp932,euc-jp    " 文字コード
set fileencoding=utf-8
set fileformats=unix,dos,mac            " 改行文字
set fileformat=unix

" file format
set encoding=utf-8

" こっちは日本語フォント
set guifontwide=Ricty_for_Powerline:h14

" TerminalVimの設定
"set columns=158
"set lines=44

" formattoptions
" set formattoptions-=r
" set formattoptions+=j
"binaly xxd

"カーソルを行頭、行末で止まらないようにする
set whichwrap=b,s,h,l,<,>,[,]
"Visual blockモードでフリーカーソルを有効にする
set virtualedit+=block
"カーソルキーで行末／行頭の移動可能に設定
set whichwrap=b,s,[,],<,>
"□や○の文字があってもカーソル位置がずれないようにする
set ambiwidth=double

"バックスペースでインデントや改行を削除できるようにする
set backspace=indent,eol,start
"日本語の行の連結時には空白を入力しない
"テキスト整形オプション，マルチバイト系を追加
set formatoptions=lmoq
"set formatoptions+=mM
set wildmode=list,longest " コマンドライン補間をシェルっぽく
"コマンドライン補完するときに強化されたものを使う
set wildmenu
set list                  " 特殊文字を表示
set listchars=tab:>-,trail:-,nbsp:%,extends:\
set display=uhex      " 印字不可能文字を16進数で表示

" バッファを保存しなくても他のバッファを表示できるようにする
set hidden

"マウスを有効にする
if has('mouse')
  set mouse=a
endif
set ttymouse=xterm2

" クリップボード
set clipboard+=unnamed
"set clipboard+=autoselect
" 挿入モードでCtrl+kを押すとクリップボードの内容を貼り付けられるようにする "
imap <C-p>  <ESC>"*pa

" バックアップをとらない
set nobackup

" 履歴のファイル保存
if has('persistent_undo')
  set undodir=~/.vim/undodir
  set undofile
endif

" 移動コマンドを使ったとき、行頭に移動しない
set nostartofline

" vi互換モードOFF
set nocompatible

set number                " 行数表示
set ruler                 " 列番号を表示

set showcmd               " 入力中のコマンドを表示
set showmode              " 現在のモードを表示
set showmatch             " 対応する括弧を表示
"set showtabline=2         " タブバーを常に表示

set grepprg=internal      "内蔵grep

set expandtab             " <Tab> を挿入するかわりに空白を挿入する.CTRL-VでTabを挿入できる。
set tabstop=2             " tab 文字を画面上で何文字に表示するか
set softtabstop=2         " tab キー押下時のインデント量
set shiftwidth=2          " autoindent 時に挿入されるインデント量
set autoindent            " 自動でインデント
set smartindent           " 新しい行を開始したときに、新しい行のインデントを現在行と同じ量にする。
set cindent               " Cプログラムファイルの自動インデントを始める
"set nowrap               " 折り返ししない
"set textwidth=0           " 一行に長い文章を書いていても自動折り返しをしない

set nrformats=hex         " <C-x>,<C-a> で使う基数
set helplang=ja,en        " helpの言語の優先順位

" <F11>キーで'paste'と'nopaste'を切り替える
set pastetoggle=<F11>

" 検索状態からすぐ抜ける
" get back from search mode
nnoremap <leader><space> :noh<CR>

" insertモードでjj押せばノーマルモードに。
" in insert mode, jj means <ESC>.
inoremap jj <ESC>

" Escの2回押しでハイライト消去
nmap <ESC><ESC> ;nohlsearch<CR><ESC>

" ,wで水平分割→アクティブに
" <leader>w means split and activate.
nnoremap <leader>w <C-w>v<C-w>l

"フォーカスを失ったら自動的に上書き。
au FocusLost * :wa

" %の移動をtabでも可能に。
" tab means %
nnoremap <tab> %

" htmlで良く使う。タグに囲まれたものを一気に選択。
nnoremap <leader>ft Vatzf

" 直前に貼り付けたコードを再選択。インデントとか入れるときに便利。
nnoremap <leader>v V`]

" Ctrl-iでヘルプ
nnoremap <C-i>  :<C-u>help<Space>
" カーソル下のキーワードをヘルプでひく
nnoremap <C-i><C-i> :<C-u>help<Space><C-r><C-w><Enter>

"splitの移動を簡単に。ctrl押しながらhjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"registerとmarkの確認を楽にする
"http://whileimautomaton.net/2008/08/vimworkshop3-kana-presentation
nnoremap <Space>m :<C-u>marks
nnoremap <Space>r :<C-u>registers

"TypeScript
autocmd! BufNewFile,BufRead *.ts setf typescript

" QuickFix を自動で開く
" grep 等をしたら QF 自動で開く
autocmd QuickfixCmdPost make,grep,grepadd,vimgrep if len(getqflist()) != 0 | copen | endif

" 範囲選択して Tab でインデント
vnoremap <tab> >gv
vnoremap <S-tab> <gv

" Tab Pages
nnoremap <C-t>  <Nop>
nnoremap <C-t>n  :<C-u>tabnew<CR>
nnoremap <C-t>c  :<C-u>tabclose<CR>
nnoremap <C-t>o  :<C-u>tabonly<CR>
nnoremap <C-t>j  :<C-u>execute 'tabnext' 1 + (tabpagenr() + v:count1 - 1) % tabpagenr('$')<CR>
nnoremap <C-t>k  gT

" leaderを,に変更
" leader is ,
let mapleader = ","

"------------------------------------
"typescript auto js
" set updatetime=50

" let s:system = exists('g:loaded_vimproc') ? 'vimproc#system_bg' : 'system'

" augroup vim-auto-typescript
  " autocmd!
  " " 適当なタイミングで再読み込み
  " autocmd CursorHold   *.ts :checktime
  " autocmd CursorMoved  *.ts :checktime

  " " 書き込み時に js に出力する
  " autocmd BufWritePost *.ts :call {s:system}("tsc main.ts")
" augroup END

"------------------------------------
"ファイルを開いたら前回のカーソル位置へ移動
augroup vimrcEx
  autocmd!
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line('$') |
    \   exe "normal! g`\"" |
    \ endif
augroup END

"------------------------------------
" インクリメンタル検索を有効化
set incsearch

"------------------------------------
" 全角空白と行末の空白の色を変える
highlight WideSpace ctermbg=blue guibg=blue
highlight EOLSpace ctermbg=red guibg=red
function! s:HighlightSpaces()
    match WideSpace /　/
    match EOLSpace /\s\+$/
endf
set autoread

" 保存時に行末の空白を除去する
autocmd BufWritePre * :%s/\s\+$//ge
" 保存時にtabをスペースに変換する
autocmd BufWritePre * :%s/\t/  /ge
"command! RemoveEolSpace call s:ExecuteKeepView('silent! %substitute/ \+$//g | nohlsearch')

" 保存時に改行コード(LF)にする
function! s:set_fileformat()
  if &fileformat != "unix" && input("setlocal fileformat=unix?[y/n]") == "y"
  try
    setlocal fileformat=unix
  catch
    endtry
  endif
endfunction
autocmd BufWritePre * :call <SID>set_fileformat()

" 改行時の自動コメントを抑制
"autocmd FileType * setlocal formatoptions-=r " 挿入モードで改行した時に # を自動挿入しない
"autocmd FileType * setlocal formatoptions-=o " ノーマルモードで o や O をした時に # を自動挿入しない
"autocmd FileType * setlocal formatoptions+=j " jJ で join したときに行頭コメントを除去する

autocmd FileType .html set matchpairs+=<:>

" コマンド実行後の表示状態を維持する
"function! s:ExecuteKeepView(expr, commandname)
"  if input("setlocal " + commandname + "?[y/n]") == "y"
"    let wininfo = winsaveview()
"    execute a:expr
"    call winrestview(wininfo)
"  endif
"endfunction

"rubyマジックコメント
iab u8 # -*- coding: utf-8 -*-
" ruby puts マーカー
iab p= p "= 1 ====================================================================="

"------------------------------------
" ;でコマンド入力( ;と:を入れ替)
noremap ; :
noremap : ;

" CTRL-hjklでウィンドウ移動
nnoremap <C-j> ;<C-w>j
nnoremap <C-k> ;<C-k>j
nnoremap <C-l> ;<C-l>j
nnoremap <C-h> ;<C-h>j

" キーマップ
"" 前のバッファ
map <F2> <ESC>:bp<CR>
"" 次のバッファ
map <F3> <ESC>:bn<CR>
"" バッファを削除
map <F4> <ESC>:bw<CR>
"" 表示行単位で行移動
nnoremap j gj
nnoremap k gk

"------------------------------------
" 編集関連 Edit
"------------------------------------

" insertモードを抜けるとIMEオフ
set noimdisable
set iminsert=0 imsearch=0
set noimcmdline
inoremap :set iminsert=0

" コンマの後に自動的にスペースを挿入
inoremap , ,
" XMLの閉タグを自動挿入
augroup MyXML
autocmd!
autocmd Filetype xml inoremap
augroup END

" y9で行末までヤンク
nmap y9 y$
" y0で行頭までヤンク
nmap y0 y^

"------------------------------------
" オートコマンド設定
"------------------------------------

"入力モード時、ステータスラインのカラーを変更
augroup InsertHook
  autocmd!
  autocmd InsertEnter * highlight StatusLine guifg=#ccdc90 guibg=#2E4340
  autocmd InsertLeave * highlight StatusLine guifg=#2E4340 guibg=#ccdc90
augroup END

"日本語入力をリセット
au BufNewFile,BufRead * set iminsert=0
".txtファイルで自動的に日本語入力ON
au BufNewFile,BufRead *.txt set iminsert=2

"全角スペースを視覚化
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=#666666
au BufNewFile,BufRead * match ZenkakuSpace /　/

"------------------------------------
"バイナリ編集(xxd)モード（vim -b での起動、もしくは *.binファイルを開くと発動します）
"------------------------------------
augroup BinaryXXD
  autocmd!
  autocmd BufReadPre  *.bin let &binary =1
  autocmd BufReadPost * if &binary | silent %!xxd -g 1
  autocmd BufReadPost * set ft=xxd | endif
  autocmd BufWritePre * if &binary | %!xxd -r | endif
  autocmd BufWritePost * if &binary | silent %!xxd -g 1
  autocmd BufWritePost * set nomod | endif
augroup END

augroup Binary
  au!
  au BufReadPre  *.swf let &bin=1
  au BufReadPost *.swf if &bin | %!xxd
  au BufReadPost *.swf set ft=xxd | endif
  au BufWritePre *.swf if &bin | %!xxd -r
  au BufWritePre *.swf endif
  au BufWritePost *.swf if &bin | %!xxd
  au BufWritePost *.swf set nomod | endif
augroup END

augroup SkeletonAu
  autocmd!
  autocmd BufNewFile *.html 0r $HOME/.vim/skeletons-vim/skeleton.html
  autocmd BufNewFile *.css 0r $HOME/.vim/skeletons-vim/skeleton.css
  autocmd BufNewFile *.js 0r $HOME/.vim/skeletons-vim/skeleton.js
augroup END


" shebang がある場合は保存時に実行権限付与
autocmd BufWritePost * :call AddExecmod()
function AddExecmod()
  let line = getline(1)
  if strpart(line, 0, 2) == "#!"
    call system("chmod +x ". expand("%"))
  endif
endfunction

" 保存時にディレクトリ作成
" @see http://vim-users.jp/2011/02/hack202/
augroup vimrc-auto-mkdir
  autocmd!
  autocmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
  function! s:auto_mkdir(dir, force)
    if !isdirectory(a:dir) && (a:force ||
    \    input(printf('"%s" does not exist. Create? [y/N]', a:dir)) =~? '^y\%[es]$')
      call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
    endif
  endfunction
augroup END


